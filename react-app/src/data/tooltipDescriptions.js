export const tooltipDescriptions = {
    taxonomy_tree: "A taxonomy tree is a hierarchical structure used in ontology creation to organize and classify concepts or entities. It helps define class names, stereotypes, and equivalent classes, facilitating the systematic organization of knowledge",
    taxonomy_details: "Taxonomy details offer a comprehensive examination of class properties, highlighting the unique attributes and characteristics associated with each category. We meticulously define these properties to provide a clear understanding of the roles and functionalities of each class within the system. Furthermore, we ensure accurate identification of disjoint classes, maintaining a clear separation between categories without any common instances. Additionally, we recognize overlapping classes, where multiple categories may share common instances or characteristics, facilitating a nuanced understanding of relationships and connections. Through our taxonomy details, we provide an in-depth view of class properties, disjoint classes, and overlapping classes, unraveling the intricacies of our knowledge organization and classification within the system.",
    submit_taxonomies: "submit_taxonomies description",

    taxonomy_classname: "Add the classname",
    taxonomy_stereotype: "A stereotype refers to a predefined or predefined characteristic or behavior associated with a class.",
    taxonomy_equivalentclass: "An equivalent class refers to a class that has the same meaning or definition as another class within the ontology",
    save_taxonomybranch: "save_taxonomybranch",
    stereotypes_list: "stereotypes_list",

    selected_class: "The class you have selected to enter details",
    taxonomy_properties: "taxonomy_properties",
    disjoint_classes: "Disjoint classes in an ontology refer to categories that have no common instances or overlap. It means that entities cannot simultaneously belong to multiple disjoint classes. Each entity in the ontology is assigned to one and only one disjoint class.",
    overlapping_classes: "Overlapping classes refer to categories within an ontology that share some common instances or characteristics. While each class in the ontology represents a distinct category, overlapping classes indicate that certain entities can belong to multiple classes simultaneously.",

    property_name: "property_name",
    property_datatype: "property_datatype",
    property_restrictions: "property_restrictions",
    property_functional: "property_functional",
    add_property: "add_property",
    view_property: "view_property",
    submit_properties: "submit_properties",
    
    simpleOP_cage: "Adding object properties to a class structure or taxonomy in an ontology involves defining relationships or connections between classes. Object properties represent the associations or links between entities of different classes. By adding object properties, we can express how instances of one class are related to instances of other classes within the ontology.",
    advancedOP_cage: "advancedOP_cage",
    submit_all_op: "submit_all_op",

    relationship_label: "relationship_label",
    inverse_relationship: "inverse_relationship",
    relationship_equivalentname: "relationship_equivalentname",
    relationship_domain: "relationship_domain",
    relationship_ranges: "relationship_ranges",
    relationship_types: "relationship_types",
    save_relationshipdetails: "save_relationshipdetails",

    add_simpleOP_icon: "add_simpleOP_icon",
    simpleOP_list: "simpleOP_list",
    submitAll_SOP: "submitAll_SOP",
    check_SOP_consistency: "check_SOP_consistency",

    add_advancedOP_icon: "add_advancedOP_icon",
    advancedOP_list: "advancedOP_list",
    submitAll_AOP: "submitAll_AOP",
    check_AOP_consistency: "check_AOP_consistency",

    single_range_entry: "single_range_entry",
    multi_range_entry: "multi_range_entry",

    sop_label: "sop_label",
    sop_inverse: "sop_inverse",
    sop_equivalentname: "sop_equivalentname",
    sop_domain: "sop_domain",
    sop_range: "sop_range",
    sop_quantifiers: "sop_quantifiers",
    sop_relationship_types: "sop_relationship_types",
    sop_constraints: "sop_constraints",
    add_sop: "add_sop",
    cancel_sop: "cancel_sop",
    
    add_multiRanges: "add_multiRanges",
    sop_addRange: "sop_addRange",
    sop_addedMultiRange: "sop_addedMultiRange",
    save_sop_multiRanges: "save_sop_multiRanges",

    aop_label: "aop_label",
    aop_domain: "aop_domain",
    aop_range: "aop_range",
    aop_additionalAttrubutes: "aop_additionalAttrubutes",
    add_aop: "add_aop",
    aop_addConstraints: "aop_addConstraints",

    range_name: "range_name",
    some_constraint: "some_constraint",
    only_constraint: "only_constraint",
    min_constraint: "min_constraint",
    max_constraint: "max_constraint",
    exactly_constraint: "exactly_constraint",
    save_constraint: "save_constraint"
}